import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';

class SliverPauseAnimation extends StatelessWidget {
  final Widget Function(BuildContext, double) builder;
  final double pauseAmount;

  SliverPauseAnimation({
    required this.pauseAmount,
    required this.builder,
  });

  double getProgress(SliverConstraints constraints) {
    return constraints.scrollOffset.clamp(0.0, pauseAmount) / pauseAmount;
  }

  Widget build(BuildContext context) {
    return SliverLayoutBuilder(
      builder: (context, constraints) {
        return SliverPause(
          duration: duration,
          child: builder(context, getProgress(constraints)),
        );
      },
    );
  }
}

class SliverPause extends SingleChildRenderObjectWidget {

  final Widget child;
  final double duration;

  SliverPause({
    required this.pauseAmount,
    required this.child,
  });

  @override
  RenderObject createRenderObject(BuildContext context)
      => RenderSliverPause(pauseAmount: pauseAmount);
 
}

class RenderSliverPause extends RenderSliverSingleBoxAdapter {

  final double pauseAmount;

  RenderSliverPause({required this.pauseAmount});

  @override
  void performLayout() {
    if (child == null) {
      geometry = SliverGeometry.zero;
      return;
    }
    final SliverConstraints constraints = this.constraints;
    child!.layout(constraints.asBoxConstraints(), parentUsesSize: true);
    final double childExtent;
    switch (constraints.axis) {
      case Axis.horizontal:
        childExtent = child!.size.width;
        break;
      case Axis.vertical:
        childExtent = child!.size.height;
        break;
    }
    assert(childExtent != null);

    final paintedChildSize = (childExtent + min(0.0, -constraints.scrollOffset + pauseAmount)).clamp(0.0, constraints.remainingPaintExtent);

    assert(paintedChildSize.isFinite);
    geometry = SliverGeometry(
      scrollExtent: childExtent + pauseAmount,
      layoutExtent: paintedChildSize,
      paintExtent: paintedChildSize,
      maxPaintExtent: paintedChildSize,
    );
    setChildParentData(child!, constraints, geometry!);
  }

  /// Sets the [SliverPhysicalParentData.paintOffset] for the given child
  /// according to the [SliverConstraints.axisDirection] and
  /// [SliverConstraints.growthDirection] and the given geometry.
  @protected
  void setChildParentData(RenderObject child, SliverConstraints constraints, SliverGeometry geometry) {
    final SliverPhysicalParentData childParentData = child.parentData! as SliverPhysicalParentData;
    assert(constraints.axisDirection != null);
    assert(constraints.growthDirection != null);
    switch (applyGrowthDirectionToAxisDirection(constraints.axisDirection, constraints.growthDirection)) {
      case AxisDirection.up:
        childParentData.paintOffset = Offset(0.0, -(geometry.scrollExtent - (geometry.paintExtent + constraints.scrollOffset)));
        break;
      case AxisDirection.right:
        childParentData.paintOffset = Offset(-constraints.scrollOffset, 0.0);
        break;
      case AxisDirection.down:
        childParentData.paintOffset = Offset(0.0, min(0.0, -constraints.scrollOffset + pauseAmount));
        break;
      case AxisDirection.left:
        childParentData.paintOffset = Offset(-(geometry.scrollExtent - (geometry.paintExtent + constraints.scrollOffset)), 0.0);
        break;
    }
    assert(childParentData.paintOffset != null);
  }
}

/*class RenderSliverFillViewport extends RenderSliverSingleBoxAdapter {

  double pauseAmount;

  RenderScrollAnimate({required RenderBox? child}) : super(child: child);

  @override
  void performLayout() {
    final constraints = this.constraints;

    final layoutExtent = constraints.viewportMainAxisExtent;

    child!.layout(
      constraints.asBoxConstraints(
        minExtent: layoutExtent,
      ),
      parentUsesSize: true
    );
    final double childExtent;
    switch (constraints.axis) {
      case Axis.horizontal:
        childExtent = child!.size.width;
        break;
      case Axis.vertical:
        childExtent = child!.size.height;
        break;
    }
    assert(childExtent != null);

    geometry = SliverGeometry(
      scrollExtent: layoutExtent,
      paintExtent: layoutExtent,
      maxPaintExtent: layoutExtent,
    );
    setChildParentData(child!, constraints, geometry!);
  }

}*/
